{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://github.com/lerna-lite/lerna-lite#getting-started",
  "title": "JSON schema for Lerna-Lite configuration",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string",
      "description": "The JSON schema version used to validate this configuration file"
    },
    "extends": {
      "type": "string",
      "description": "A shareable configuration preset that will be used as the base for this configuration"
    },
    "version": {
      "type": "string",
      "description": "The version of the repository, or \"independent\" for a repository with independently versioned packages.",
      "default": "0.0.0"
    },
    "packages": {
      "type": "array",
      "items": {
        "type": "string",
        "uniqueItems": true
      },
      "description": "An array of globs where packages can be located.",
      "default": ["packages/*"]
    },
    "command": {
      "type": "object",
      "description": "Options for individual Lerna commands.",
      "properties": {
        "changed": {
          "type": "object",
          "description": "Options for the `changed` command.",
          "properties": {
            "conventionalCommits": {
              "$ref": "#/$defs/commandOptions/shared/conventionalCommits"
            },
            "conventionalGraduate": {
              "$ref": "#/$defs/commandOptions/shared/conventionalGraduate"
            },
            "forceConventionalGraduate": {
              "$ref": "#/$defs/commandOptions/shared/forceConventionalGraduate"
            },
            "forcePublish": {
              "$ref": "#/$defs/commandOptions/shared/forcePublish"
            },
            "ignoreChanges": {
              "$ref": "#/$defs/commandOptions/shared/ignoreChanges"
            },
            "npmClient": {
              "$ref": "#/$defs/globals/npmClient"
            },
            "loglevel": {
              "$ref": "#/$defs/globals/loglevel"
            },
            "concurrency": {
              "$ref": "#/$defs/globals/concurrency"
            },
            "rejectCycles": {
              "$ref": "#/$defs/globals/rejectCycles"
            },
            "progress": {
              "$ref": "#/$defs/globals/progress"
            },
            "sort": {
              "$ref": "#/$defs/globals/sort"
            },
            "maxBuffer": {
              "$ref": "#/$defs/globals/maxBuffer"
            },
            "yes": {
              "$ref": "#/$defs/globals/yes"
            },

            "scope": {
              "$ref": "#/$defs/filters/scope"
            },
            "ignore": {
              "$ref": "#/$defs/filters/ignore"
            },
            "private": {
              "$ref": "#/$defs/filters/private"
            },
            "since": {
              "$ref": "#/$defs/filters/since"
            },
            "excludeDependents": {
              "$ref": "#/$defs/filters/excludeDependents"
            },
            "includeDependents": {
              "$ref": "#/$defs/filters/includeDependents"
            },
            "includeDependencies": {
              "$ref": "#/$defs/filters/includeDependencies"
            },
            "includeMergedTags": {
              "$ref": "#/$defs/filters/includeMergedTags"
            },
            "continueIfNoMatch": {
              "$ref": "#/$defs/filters/continueIfNoMatch"
            }
          }
        },
        "diff": {
          "type": "object",
          "description": "Options for the `diff` command.",
          "properties": {
            "ignoreChanges": {
              "$ref": "#/$defs/commandOptions/shared/ignoreChanges"
            },

            "npmClient": {
              "$ref": "#/$defs/globals/npmClient"
            },
            "loglevel": {
              "$ref": "#/$defs/globals/loglevel"
            },
            "concurrency": {
              "$ref": "#/$defs/globals/concurrency"
            },
            "rejectCycles": {
              "$ref": "#/$defs/globals/rejectCycles"
            },
            "progress": {
              "$ref": "#/$defs/globals/progress"
            },
            "sort": {
              "$ref": "#/$defs/globals/sort"
            },
            "maxBuffer": {
              "$ref": "#/$defs/globals/maxBuffer"
            },
            "yes": {
              "$ref": "#/$defs/globals/yes"
            },

            "scope": {
              "$ref": "#/$defs/filters/scope"
            },
            "ignore": {
              "$ref": "#/$defs/filters/ignore"
            },
            "private": {
              "$ref": "#/$defs/filters/private"
            },
            "since": {
              "$ref": "#/$defs/filters/since"
            },
            "excludeDependents": {
              "$ref": "#/$defs/filters/excludeDependents"
            },
            "includeDependents": {
              "$ref": "#/$defs/filters/includeDependents"
            },
            "includeDependencies": {
              "$ref": "#/$defs/filters/includeDependencies"
            },
            "includeMergedTags": {
              "$ref": "#/$defs/filters/includeMergedTags"
            },
            "continueIfNoMatch": {
              "$ref": "#/$defs/filters/continueIfNoMatch"
            }
          }
        },
        "exec": {
          "type": "object",
          "description": "Options for the `exec` command.",
          "properties": {
            "dryRun": {
              "$ref": "#/$defs/commandOptions/exec/dryRun"
            },
            "stream": {
              "$ref": "#/$defs/commandOptions/shared/stream"
            },
            "parallel": {
              "$ref": "#/$defs/commandOptions/shared/parallel"
            },
            "noBail": {
              "$ref": "#/$defs/commandOptions/shared/noBail"
            },
            "bail": {
              "$ref": "#/$defs/commandOptions/shared/bail"
            },
            "noPrefix": {
              "$ref": "#/$defs/commandOptions/shared/noPrefix"
            },
            "prefix": {
              "$ref": "#/$defs/commandOptions/shared/prefix"
            },
            "profile": {
              "$ref": "#/$defs/commandOptions/shared/profile"
            },
            "profileLocation": {
              "$ref": "#/$defs/commandOptions/shared/profileLocation"
            },

            "npmClient": {
              "$ref": "#/$defs/globals/npmClient"
            },
            "loglevel": {
              "$ref": "#/$defs/globals/loglevel"
            },
            "concurrency": {
              "$ref": "#/$defs/globals/concurrency"
            },
            "rejectCycles": {
              "$ref": "#/$defs/globals/rejectCycles"
            },
            "progress": {
              "$ref": "#/$defs/globals/progress"
            },
            "sort": {
              "$ref": "#/$defs/globals/sort"
            },
            "maxBuffer": {
              "$ref": "#/$defs/globals/maxBuffer"
            },
            "scope": {
              "$ref": "#/$defs/filters/scope"
            },
            "ignore": {
              "$ref": "#/$defs/filters/ignore"
            },
            "private": {
              "$ref": "#/$defs/filters/private"
            },
            "since": {
              "$ref": "#/$defs/filters/since"
            },
            "excludeDependents": {
              "$ref": "#/$defs/filters/excludeDependents"
            },
            "includeDependents": {
              "$ref": "#/$defs/filters/includeDependents"
            },
            "includeDependencies": {
              "$ref": "#/$defs/filters/includeDependencies"
            },
            "includeMergedTags": {
              "$ref": "#/$defs/filters/includeMergedTags"
            },
            "continueIfNoMatch": {
              "$ref": "#/$defs/filters/continueIfNoMatch"
            }
          }
        },
        "init": {
          "type": "object",
          "description": "Options for the `init` command.",
          "properties": {
            "exact": {
              "$ref": "#/$defs/commandOptions/shared/exact"
            },
            "independent": {
              "$ref": "#/$defs/commandOptions/init/independent"
            },
            "useWorkspaces": {
              "$ref": "#/$defs/commandOptions/init/useWorkspaces"
            }
          }
        },
        "list": {
          "type": "object",
          "description": "Options for the `list` command.",
          "properties": {
            "npmClient": {
              "$ref": "#/$defs/globals/npmClient"
            },
            "loglevel": {
              "$ref": "#/$defs/globals/loglevel"
            },
            "concurrency": {
              "$ref": "#/$defs/globals/concurrency"
            },
            "rejectCycles": {
              "$ref": "#/$defs/globals/rejectCycles"
            },
            "progress": {
              "$ref": "#/$defs/globals/progress"
            },
            "sort": {
              "$ref": "#/$defs/globals/sort"
            },
            "maxBuffer": {
              "$ref": "#/$defs/globals/maxBuffer"
            },
            "yes": {
              "$ref": "#/$defs/globals/yes"
            },

            "scope": {
              "$ref": "#/$defs/filters/scope"
            },
            "ignore": {
              "$ref": "#/$defs/filters/ignore"
            },
            "private": {
              "$ref": "#/$defs/filters/private"
            },
            "since": {
              "$ref": "#/$defs/filters/since"
            },
            "excludeDependents": {
              "$ref": "#/$defs/filters/excludeDependents"
            },
            "includeDependents": {
              "$ref": "#/$defs/filters/includeDependents"
            },
            "includeDependencies": {
              "$ref": "#/$defs/filters/includeDependencies"
            },
            "includeMergedTags": {
              "$ref": "#/$defs/filters/includeMergedTags"
            },
            "continueIfNoMatch": {
              "$ref": "#/$defs/filters/continueIfNoMatch"
            }
          }
        },
        "publish": {
          "type": "object",
          "description": "Options for the `publish` command.",
          "properties": {
            "arboristLoadOptions": {
              "$ref": "#/$defs/commandOptions/publish/arboristLoadOptions"
            },
            "canary": {
              "$ref": "#/$defs/commandOptions/publish/canary"
            },
            "dryRun": {
              "$ref": "#/$defs/commandOptions/publish/dryRun"
            },
            "preid": {
              "$ref": "#/$defs/commandOptions/shared/preid"
            },
            "contents": {
              "$ref": "#/$defs/commandOptions/shared/contents"
            },
            "describeTag": {
              "$ref": "#/$defs/globals/describeTag"
            },
            "distTag": {
              "$ref": "#/$defs/commandOptions/publish/distTag"
            },
            "legacyAuth": {
              "$ref": "#/$defs/commandOptions/publish/legacyAuth"
            },
            "preDistTag": {
              "$ref": "#/$defs/commandOptions/publish/preDistTag"
            },
            "gitHead": {
              "$ref": "#/$defs/commandOptions/publish/gitHead"
            },
            "graphType": {
              "$ref": "#/$defs/commandOptions/publish/graphType"
            },
            "ignorePrepublish": {
              "$ref": "#/$defs/commandOptions/shared/ignorePrepublish"
            },
            "ignoreScripts": {
              "$ref": "#/$defs/commandOptions/shared/ignoreScripts"
            },
            "noGranularPathspec": {
              "$ref": "#/$defs/commandOptions/shared/noGranularPathspec"
            },
            "granularPathspec": {
              "$ref": "#/$defs/commandOptions/shared/granularPathspec"
            },
            "otp": {
              "$ref": "#/$defs/commandOptions/publish/otp"
            },
            "publishConfigOverrides": {
              "$ref": "#/$defs/commandOptions/publish/publishConfigOverrides"
            },
            "registry": {
              "$ref": "#/$defs/commandOptions/shared/registry"
            },
            "removePackageFields": {
              "$ref": "#/$defs/commandOptions/publish/removePackageFields"
            },
            "noGitReset": {
              "$ref": "#/$defs/commandOptions/publish/noGitReset"
            },
            "gitReset": {
              "$ref": "#/$defs/commandOptions/publish/gitReset"
            },
            "tempTag": {
              "$ref": "#/$defs/commandOptions/publish/tempTag"
            },
            "noVerifyAccess": {
              "$ref": "#/$defs/commandOptions/publish/noVerifyAccess"
            },
            "verifyAccess": {
              "$ref": "#/$defs/commandOptions/publish/verifyAccess"
            },

            "npmClient": {
              "$ref": "#/$defs/globals/npmClient"
            },
            "loglevel": {
              "$ref": "#/$defs/globals/loglevel"
            },
            "concurrency": {
              "$ref": "#/$defs/globals/concurrency"
            },
            "rejectCycles": {
              "$ref": "#/$defs/globals/rejectCycles"
            },
            "progress": {
              "$ref": "#/$defs/globals/progress"
            },
            "sort": {
              "$ref": "#/$defs/globals/sort"
            },
            "maxBuffer": {
              "$ref": "#/$defs/globals/maxBuffer"
            },
            "yes": {
              "$ref": "#/$defs/globals/yes"
            },

            "scope": {
              "$ref": "#/$defs/filters/scope"
            },
            "ignore": {
              "$ref": "#/$defs/filters/ignore"
            },
            "private": {
              "$ref": "#/$defs/filters/private"
            },
            "since": {
              "$ref": "#/$defs/filters/since"
            },
            "excludeDependents": {
              "$ref": "#/$defs/filters/excludeDependents"
            },
            "includeDependents": {
              "$ref": "#/$defs/filters/includeDependents"
            },
            "includeDependencies": {
              "$ref": "#/$defs/filters/includeDependencies"
            },
            "includeMergedTags": {
              "$ref": "#/$defs/filters/includeMergedTags"
            },
            "continueIfNoMatch": {
              "$ref": "#/$defs/filters/continueIfNoMatch"
            },
            "summaryFile": {
              "$ref": "#/$defs/commandOptions/publish/summaryFile"
            }
          }
        },
        "run": {
          "type": "object",
          "description": "Options for the `run` command.",
          "properties": {
            "dryRun": {
              "$ref": "#/$defs/commandOptions/run/dryRun"
            },
            "stream": {
              "$ref": "#/$defs/commandOptions/shared/stream"
            },
            "parallel": {
              "$ref": "#/$defs/commandOptions/shared/parallel"
            },
            "noBail": {
              "$ref": "#/$defs/commandOptions/shared/noBail"
            },
            "bail": {
              "$ref": "#/$defs/commandOptions/shared/bail"
            },
            "noPrefix": {
              "$ref": "#/$defs/commandOptions/shared/noPrefix"
            },
            "prefix": {
              "$ref": "#/$defs/commandOptions/shared/prefix"
            },
            "profile": {
              "$ref": "#/$defs/commandOptions/shared/profile"
            },
            "profileLocation": {
              "$ref": "#/$defs/commandOptions/shared/profileLocation"
            },
            "verbose": {
              "$ref": "#/$defs/commandOptions/shared/verbose"
            },
            "npmClient": {
              "$ref": "#/$defs/globals/npmClient"
            },
            "loglevel": {
              "$ref": "#/$defs/globals/loglevel"
            },
            "concurrency": {
              "$ref": "#/$defs/globals/concurrency"
            },
            "rejectCycles": {
              "$ref": "#/$defs/globals/rejectCycles"
            },
            "progress": {
              "$ref": "#/$defs/globals/progress"
            },
            "sort": {
              "$ref": "#/$defs/globals/sort"
            },
            "maxBuffer": {
              "$ref": "#/$defs/globals/maxBuffer"
            },
            "yes": {
              "$ref": "#/$defs/globals/yes"
            },

            "scope": {
              "$ref": "#/$defs/filters/scope"
            },
            "ignore": {
              "$ref": "#/$defs/filters/ignore"
            },
            "private": {
              "$ref": "#/$defs/filters/private"
            },
            "since": {
              "$ref": "#/$defs/filters/since"
            },
            "excludeDependents": {
              "$ref": "#/$defs/filters/excludeDependents"
            },
            "includeDependents": {
              "$ref": "#/$defs/filters/includeDependents"
            },
            "includeDependencies": {
              "$ref": "#/$defs/filters/includeDependencies"
            },
            "includeMergedTags": {
              "$ref": "#/$defs/filters/includeMergedTags"
            },
            "continueIfNoMatch": {
              "$ref": "#/$defs/filters/continueIfNoMatch"
            }
          }
        },
        "version": {
          "type": "object",
          "description": "Options for the `version` command.",
          "properties": {
            "allowBranch": {
              "$ref": "#/$defs/commandOptions/version/allowBranch"
            },
            "allowPeerDependenciesUpdate": {
              "$ref": "#/$defs/commandOptions/version/allowPeerDependenciesUpdate"
            },
            "amend": {
              "$ref": "#/$defs/commandOptions/version/amend"
            },
            "buildMetadata": {
              "$ref": "#/$defs/commandOptions/version/buildMetadata"
            },
            "conventionalCommits": {
              "$ref": "#/$defs/commandOptions/shared/conventionalCommits"
            },
            "conventionalGraduate": {
              "$ref": "#/$defs/commandOptions/shared/conventionalGraduate"
            },
            "forceConventionalGraduate": {
              "$ref": "#/$defs/commandOptions/shared/forceConventionalGraduate"
            },
            "conventionalBumpPrerelease": {
              "$ref": "#/$defs/commandOptions/version/conventionalBumpPrerelease"
            },
            "conventionalPrerelease": {
              "$ref": "#/$defs/commandOptions/version/conventionalPrerelease"
            },
            "changelogPreset": {
              "$ref": "#/$defs/commandOptions/version/changelogPreset"
            },
            "changelogIncludeCommitsGitAuthor": {
              "$ref": "#/$defs/commandOptions/version/changelogIncludeCommitsGitAuthor"
            },
            "changelogIncludeCommitsClientLogin": {
              "$ref": "#/$defs/commandOptions/version/changelogIncludeCommitsClientLogin"
            },
            "changelogHeaderMessage": {
              "$ref": "#/$defs/commandOptions/version/changelogHeaderMessage"
            },
            "describeTag": {
              "$ref": "#/$defs/globals/describeTag"
            },
            "dryRun": {
              "$ref": "#/$defs/commandOptions/version/dryRun"
            },
            "exact": {
              "$ref": "#/$defs/commandOptions/shared/exact"
            },
            "independentSubpackages": {
              "$ref": "#/$defs/commandOptions/shared/independentSubpackages"
            },
            "forcePublish": {
              "$ref": "#/$defs/commandOptions/shared/forcePublish"
            },
            "gitRemote": {
              "$ref": "#/$defs/commandOptions/version/gitRemote"
            },
            "createRelease": {
              "$ref": "#/$defs/commandOptions/version/createRelease"
            },
            "createReleaseDiscussion": {
              "$ref": "#/$defs/commandOptions/version/createReleaseDiscussion"
            },
            "ignoreChanges": {
              "$ref": "#/$defs/commandOptions/shared/ignoreChanges"
            },
            "ignoreScripts": {
              "$ref": "#/$defs/commandOptions/shared/ignoreScripts"
            },
            "message": {
              "$ref": "#/$defs/commandOptions/version/message"
            },
            "noChangelog": {
              "$ref": "#/$defs/commandOptions/version/noChangelog"
            },
            "changelog": {
              "$ref": "#/$defs/commandOptions/version/changelog"
            },
            "noCommitHooks": {
              "$ref": "#/$defs/commandOptions/version/noCommitHooks"
            },
            "commitHooks": {
              "$ref": "#/$defs/commandOptions/version/commitHooks"
            },
            "gitTagCommand": {
              "$ref": "#/$defs/commandOptions/version/gitTagCommand"
            },
            "noGitTagVersion": {
              "$ref": "#/$defs/commandOptions/version/noGitTagVersion"
            },
            "gitTagVersion": {
              "$ref": "#/$defs/commandOptions/version/gitTagVersion"
            },
            "noGranularPathspec": {
              "$ref": "#/$defs/commandOptions/shared/noGranularPathspec"
            },
            "granularPathspec": {
              "$ref": "#/$defs/commandOptions/shared/granularPathspec"
            },
            "noPush": {
              "$ref": "#/$defs/commandOptions/version/noPush"
            },
            "push": {
              "$ref": "#/$defs/commandOptions/version/push"
            },
            "preid": {
              "$ref": "#/$defs/commandOptions/shared/preid"
            },
            "signGitCommit": {
              "$ref": "#/$defs/commandOptions/version/signGitCommit"
            },
            "signoffGitCommit": {
              "$ref": "#/$defs/commandOptions/version/signoffGitCommit"
            },
            "signGitTag": {
              "$ref": "#/$defs/commandOptions/version/signGitTag"
            },
            "forceGitTag": {
              "$ref": "#/$defs/commandOptions/version/forceGitTag"
            },
            "skipBumpOnlyReleases": {
              "$ref": "#/$defs/commandOptions/version/skipBumpOnlyReleases"
            },
            "runScriptsOnLockfileUpdate": {
              "$ref": "#/$defs/commandOptions/version/runScriptsOnLockfileUpdate"
            },
            "syncWorkspaceLock": {
              "$ref": "#/$defs/commandOptions/version/syncWorkspaceLock"
            },
            "tagVersionPrefix": {
              "$ref": "#/$defs/commandOptions/version/tagVersionPrefix"
            },
            "premajorVersionBump": {
              "$ref": "#/$defs/commandOptions/version/premajorVersionBump"
            },

            "npmClient": {
              "$ref": "#/$defs/globals/npmClient"
            },
            "loglevel": {
              "$ref": "#/$defs/globals/loglevel"
            },
            "concurrency": {
              "$ref": "#/$defs/globals/concurrency"
            },
            "rejectCycles": {
              "$ref": "#/$defs/globals/rejectCycles"
            },
            "progress": {
              "$ref": "#/$defs/globals/progress"
            },
            "sort": {
              "$ref": "#/$defs/globals/sort"
            },
            "maxBuffer": {
              "$ref": "#/$defs/globals/maxBuffer"
            },
            "yes": {
              "$ref": "#/$defs/globals/yes"
            },

            "scope": {
              "$ref": "#/$defs/filters/scope"
            },
            "ignore": {
              "$ref": "#/$defs/filters/ignore"
            },
            "private": {
              "$ref": "#/$defs/filters/private"
            },
            "since": {
              "$ref": "#/$defs/filters/since"
            },
            "excludeDependents": {
              "$ref": "#/$defs/filters/excludeDependents"
            },
            "includeDependents": {
              "$ref": "#/$defs/filters/includeDependents"
            },
            "includeDependencies": {
              "$ref": "#/$defs/filters/includeDependencies"
            },
            "includeMergedTags": {
              "$ref": "#/$defs/filters/includeMergedTags"
            },
            "continueIfNoMatch": {
              "$ref": "#/$defs/filters/continueIfNoMatch"
            }
          }
        },
        "watch": {
          "type": "object",
          "description": "Options for the `watch` command.",
          "properties": {
            "noPrefix": {
              "$ref": "#/$defs/commandOptions/shared/noPrefix"
            },
            "prefix": {
              "$ref": "#/$defs/commandOptions/shared/prefix"
            },
            "stream": {
              "$ref": "#/$defs/commandOptions/shared/stream"
            },
            "glob": {
              "$ref": "#/$defs/commandOptions/watch/glob"
            },
            "noBail": {
              "$ref": "#/$defs/commandOptions/shared/noBail"
            },
            "bail": {
              "$ref": "#/$defs/commandOptions/shared/bail"
            },
            "awaitWriteFinish": {
              "$ref": "#/$defs/commandOptions/watch/awaitWriteFinish"
            },
            "awfStabilityThreshold": {
              "$ref": "#/$defs/commandOptions/watch/awfStabilityThreshold"
            },
            "awfPollInterval": {
              "$ref": "#/$defs/commandOptions/watch/awfPollInterval"
            },
            "atomic": {
              "$ref": "#/$defs/commandOptions/watch/atomic"
            },
            "depth": {
              "$ref": "#/$defs/commandOptions/watch/depth"
            },
            "disableGlobbing": {
              "$ref": "#/$defs/commandOptions/watch/disableGlobbing"
            },
            "followSymlinks": {
              "$ref": "#/$defs/commandOptions/watch/followSymlinks"
            },
            "ignored": {
              "$ref": "#/$defs/commandOptions/watch/ignored"
            },
            "ignorePermissionErrors": {
              "$ref": "#/$defs/commandOptions/watch/ignorePermissionErrors"
            },
            "interval": {
              "$ref": "#/$defs/commandOptions/watch/interval"
            },
            "usePolling": {
              "$ref": "#/$defs/commandOptions/watch/usePolling"
            },

            "loglevel": {
              "$ref": "#/$defs/globals/loglevel"
            },
            "concurrency": {
              "$ref": "#/$defs/globals/concurrency"
            },
            "rejectCycles": {
              "$ref": "#/$defs/globals/rejectCycles"
            },
            "progress": {
              "$ref": "#/$defs/globals/progress"
            },
            "sort": {
              "$ref": "#/$defs/globals/sort"
            },
            "maxBuffer": {
              "$ref": "#/$defs/globals/maxBuffer"
            },
            "scope": {
              "$ref": "#/$defs/filters/scope"
            },
            "ignore": {
              "$ref": "#/$defs/filters/ignore"
            },
            "private": {
              "$ref": "#/$defs/filters/private"
            },
            "since": {
              "$ref": "#/$defs/filters/since"
            },
            "excludeDependents": {
              "$ref": "#/$defs/filters/excludeDependents"
            },
            "includeDependents": {
              "$ref": "#/$defs/filters/includeDependents"
            },
            "includeDependencies": {
              "$ref": "#/$defs/filters/includeDependencies"
            },
            "includeMergedTags": {
              "$ref": "#/$defs/filters/includeMergedTags"
            },
            "continueIfNoMatch": {
              "$ref": "#/$defs/filters/continueIfNoMatch"
            }
          }
        }
      }
    },
    "describeTag": {
      "$ref": "#/$defs/globals/describeTag"
    },
    "npmClient": {
      "$ref": "#/$defs/globals/npmClient"
    },
    "npmClientArgs": {
      "$ref": "#/$defs/globals/npmClientArgs"
    },
    "loglevel": {
      "$ref": "#/$defs/globals/loglevel"
    },
    "concurrency": {
      "$ref": "#/$defs/globals/concurrency"
    },
    "rejectCycles": {
      "$ref": "#/$defs/globals/rejectCycles"
    },
    "progress": {
      "$ref": "#/$defs/globals/progress"
    },
    "sort": {
      "$ref": "#/$defs/globals/sort"
    },
    "maxBuffer": {
      "$ref": "#/$defs/globals/maxBuffer"
    },
    "useWorkspaces": {
      "$ref": "#/$defs/globals/useWorkspaces"
    },
    "yes": {
      "$ref": "#/$defs/globals/yes"
    },

    "scope": {
      "$ref": "#/$defs/filters/scope"
    },
    "ignore": {
      "$ref": "#/$defs/filters/ignore"
    },
    "private": {
      "$ref": "#/$defs/filters/private"
    },
    "since": {
      "$ref": "#/$defs/filters/since"
    },
    "excludeDependents": {
      "$ref": "#/$defs/filters/excludeDependents"
    },
    "includeDependents": {
      "$ref": "#/$defs/filters/includeDependents"
    },
    "includeDependencies": {
      "$ref": "#/$defs/filters/includeDependencies"
    },
    "includeMergedTags": {
      "$ref": "#/$defs/filters/includeMergedTags"
    },
    "continueIfNoMatch": {
      "$ref": "#/$defs/filters/continueIfNoMatch"
    },

    "independent": {
      "$ref": "#/$defs/commandOptions/init/independent"
    },

    "canary": {
      "$ref": "#/$defs/commandOptions/publish/canary"
    },
    "distTag": {
      "$ref": "#/$defs/commandOptions/publish/distTag"
    },
    "preDistTag": {
      "$ref": "#/$defs/commandOptions/publish/preDistTag"
    },
    "legacyAuth": {
      "$ref": "#/$defs/commandOptions/publish/legacyAuth"
    },
    "gitHead": {
      "$ref": "#/$defs/commandOptions/publish/gitHead"
    },
    "graphType": {
      "$ref": "#/$defs/commandOptions/publish/graphType"
    },
    "otp": {
      "$ref": "#/$defs/commandOptions/publish/otp"
    },
    "removePackageFields": {
      "$ref": "#/$defs/commandOptions/publish/removePackageFields"
    },
    "noGitReset": {
      "$ref": "#/$defs/commandOptions/publish/noGitReset"
    },
    "gitReset": {
      "$ref": "#/$defs/commandOptions/publish/gitReset"
    },
    "tempTag": {
      "$ref": "#/$defs/commandOptions/publish/tempTag"
    },
    "noVerifyAccess": {
      "$ref": "#/$defs/commandOptions/publish/noVerifyAccess"
    },
    "verifyAccess": {
      "$ref": "#/$defs/commandOptions/publish/verifyAccess"
    },
    "allowBranch": {
      "$ref": "#/$defs/commandOptions/version/allowBranch"
    },
    "allowPeerDependenciesUpdate": {
      "$ref": "#/$defs/commandOptions/version/allowPeerDependenciesUpdate"
    },
    "amend": {
      "$ref": "#/$defs/commandOptions/version/amend"
    },
    "conventionalBumpPrerelease": {
      "$ref": "#/$defs/commandOptions/version/conventionalBumpPrerelease"
    },
    "conventionalPrerelease": {
      "$ref": "#/$defs/commandOptions/version/conventionalPrerelease"
    },
    "changelogPreset": {
      "$ref": "#/$defs/commandOptions/version/changelogPreset"
    },
    "gitRemote": {
      "$ref": "#/$defs/commandOptions/version/gitRemote"
    },
    "createRelease": {
      "$ref": "#/$defs/commandOptions/version/createRelease"
    },
    "message": {
      "$ref": "#/$defs/commandOptions/version/message"
    },
    "noChangelog": {
      "$ref": "#/$defs/commandOptions/version/noChangelog"
    },
    "changelog": {
      "$ref": "#/$defs/commandOptions/version/changelog"
    },
    "noCommitHooks": {
      "$ref": "#/$defs/commandOptions/version/noCommitHooks"
    },
    "commitHooks": {
      "$ref": "#/$defs/commandOptions/version/commitHooks"
    },
    "noGitTagVersion": {
      "$ref": "#/$defs/commandOptions/version/noGitTagVersion"
    },
    "gitTagVersion": {
      "$ref": "#/$defs/commandOptions/version/gitTagVersion"
    },
    "noPush": {
      "$ref": "#/$defs/commandOptions/version/noPush"
    },
    "push": {
      "$ref": "#/$defs/commandOptions/version/push"
    },
    "signGitCommit": {
      "$ref": "#/$defs/commandOptions/version/signGitCommit"
    },
    "signGitTag": {
      "$ref": "#/$defs/commandOptions/version/signGitTag"
    },
    "forceGitTag": {
      "$ref": "#/$defs/commandOptions/version/forceGitTag"
    },
    "tagVersionPrefix": {
      "$ref": "#/$defs/commandOptions/version/tagVersionPrefix"
    },
    "premajorVersionBump": {
      "$ref": "#/$defs/commandOptions/version/premajorVersionBump"
    },

    "registry": {
      "$ref": "#/$defs/commandOptions/shared/registry"
    },
    "conventionalCommits": {
      "$ref": "#/$defs/commandOptions/shared/conventionalCommits"
    },
    "conventionalGraduate": {
      "$ref": "#/$defs/commandOptions/shared/conventionalGraduate"
    },
    "forceLocal": {
      "$ref": "#/$defs/commandOptions/shared/forceLocal"
    },
    "contents": {
      "$ref": "#/$defs/commandOptions/shared/contents"
    },
    "ignoreChanges": {
      "$ref": "#/$defs/commandOptions/shared/ignoreChanges"
    },
    "stream": {
      "$ref": "#/$defs/commandOptions/shared/stream"
    },
    "parallel": {
      "$ref": "#/$defs/commandOptions/shared/parallel"
    },
    "noBail": {
      "$ref": "#/$defs/commandOptions/shared/noBail"
    },
    "bail": {
      "$ref": "#/$defs/commandOptions/shared/bail"
    },
    "noPrefix": {
      "$ref": "#/$defs/commandOptions/shared/noPrefix"
    },
    "prefix": {
      "$ref": "#/$defs/commandOptions/shared/prefix"
    },
    "profile": {
      "$ref": "#/$defs/commandOptions/shared/profile"
    },
    "profileLocation": {
      "$ref": "#/$defs/commandOptions/shared/profileLocation"
    },
    "preid": {
      "$ref": "#/$defs/commandOptions/shared/preid"
    },
    "ignoreScripts": {
      "$ref": "#/$defs/commandOptions/shared/ignoreScripts"
    },
    "noGranularPathspec": {
      "$ref": "#/$defs/commandOptions/shared/noGranularPathspec"
    },
    "granularPathspec": {
      "$ref": "#/$defs/commandOptions/shared/granularPathspec"
    },
    "forcePublish": {
      "$ref": "#/$defs/commandOptions/shared/forcePublish"
    },
    "exact": {
      "$ref": "#/$defs/commandOptions/shared/exact"
    },
    "ignorePrepublish": {
      "$ref": "#/$defs/commandOptions/shared/ignorePrepublish"
    },
    "verbose": {
      "$ref": "#/$defs/commandOptions/shared/verbose"
    }
  },
  "$defs": {
    "globals": {
      "describeTag": {
        "type": "string",
        "description": "During `lerna publish` (not `from-git` mode) and `lerna version`, the package updated since the last release will be found based on the describeTag.",
        "default": ""
      },
      "npmClient": {
        "type": "string",
        "description": "The npm client to use when running commands (either 'npm', 'pnpm', 'yarn' or 'bun'). Defaults to 'npm' if unspecified.",
        "default": "npm",
        "enum": ["npm", "pnpm", "yarn", "bun"]
      },
      "npmClientArgs": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "Arguments to pass to the npm client when running commands."
      },
      "loglevel": {
        "type": "string",
        "description": "The level of logging to use when running commands. Defaults to 'info' if unspecified. You can see more logs by changing to the next log level: 'silent', 'error', 'warn', 'success', 'info', 'verbose' or 'silly'",
        "default": "info",
        "enum": ["error", "warn", "info", "verbose", "debug", "silly"]
      },
      "concurrency": {
        "type": "integer",
        "description": "The number of concurrent processes to use when running commands. Defaults to the number of CPUs if unspecified."
      },
      "rejectCycles": {
        "type": "boolean",
        "description": "When true, Lerna will fail if a cycle is detected among dependencies."
      },
      "progress": {
        "type": "boolean",
        "description": "When true, Lerna will display progress bars when running commands. Progress bars are always off in CI."
      },
      "sort": {
        "type": "boolean",
        "description": "When true, Lerna will sort the packages topologically (dependencies before dependents)."
      },
      "maxBuffer": {
        "type": "integer",
        "description": "The maximum number of bytes to allow a child process for subcommand execution."
      },
      "useWorkspaces": {
        "type": "boolean",
        "description": "Enables integration with Yarn or other package manager that use `workspaces` property in `package.json`."
      },
      "yes": {
        "type": "boolean",
        "description": "When true, Lerna will automatically answer yes to all confirmation prompts."
      }
    },
    "filters": {
      "scope": {
        "type": "string",
        "description": "Include only packages with names matching the given glob"
      },
      "ignore": {
        "type": "string",
        "description": "Exclude packages with names matching the given glob"
      },
      "private": {
        "type": "boolean",
        "description": "Include private packages in the command. During `lerna create`, specifies that the new package is private (never published to any external registry)."
      },
      "since": {
        "type": "string",
        "description": "Only include packages that have been changed since the specified [ref]."
      },
      "excludeDependents": {
        "type": "boolean",
        "description": "Exclude all transitive dependents when running a command with --since, overriding the default \"changed\" algorithm."
      },
      "includeDependents": {
        "type": "boolean",
        "description": "Include all transitive dependents when running a command regardless of --scope, --ignore, or --since."
      },
      "includeDependencies": {
        "type": "boolean",
        "description": "Include all transitive dependencies when running a command regardless of --scope, --ignore, or --since."
      },
      "includeMergedTags": {
        "type": "boolean",
        "description": "Include tags from merged branches when running a command with --since."
      },
      "continueIfNoMatch": {
        "type": "boolean",
        "description": "Don't fail if no package is matched."
      }
    },
    "commandOptions": {
      "exec": {
        "dryRun": {
          "type": "boolean",
          "description": "During `lerna exec`, when true, displays the process command that would be performed without executing it."
        }
      },
      "init": {
        "independent": {
          "type": "boolean",
          "description": "During `lerna init`, when true, version packages independently."
        },
        "useWorkspaces": {
          "type": "boolean",
          "description": "During `lerna init`, enables integration with Yarn or other package manager that use `workspaces` property in `package.json`."
        }
      },
      "publish": {
        "arboristLoadOptions": {
          "type": "object",
          "description": "During `lerna publish`, Arborist options associated to the `arborist.loadActual(options)` method."
        },
        "canary": {
          "type": "boolean",
          "description": "During `lerna publish`, when true, publish packages after every successful merge using the sha as part of the tag."
        },
        "cleanupTempFiles": {
          "type": "boolean",
          "description": "Cleanup packed temp files/folders after publish process is finished, defaults to false."
        },
        "distTag": {
          "type": "string",
          "description": "During `lerna publish`, publish packages with the specified npm dist-tag."
        },
        "dryRun": {
          "type": "boolean",
          "description": "During `lerna publish`, displays the process command that would be performed without executing it."
        },
        "preDistTag": {
          "type": "string",
          "description": "During `lerna publish`, publish prerelease packages with the specified npm dist-tag."
        },
        "legacyAuth": {
          "type": "string",
          "description": "For `lerna publish`, the Legacy Base64 Encoded username and password to use."
        },
        "gitHead": {
          "type": "string",
          "description": "For `lerna publish`, the explicit SHA to set as gitHead when packing tarballs, only allowed with 'from-package' positional."
        },
        "graphType": {
          "type": "string",
          "enum": ["all", "dependencies", "allDependencies"],
          "description": "DEPRECATED: For `lerna publish`, if you want to ignore devDependencies when considering the package graph you can set this property equal to 'dependencies'.",
          "default": "all",
          "deprecated": true
        },
        "otp": {
          "type": "string",
          "description": "During `lerna publish`, supply a one-time password for publishing with two-factor authentication."
        },
        "publishConfigOverrides": {
          "type": "boolean",
          "description": "apply publishConfig overrides."
        },
        "removePackageFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Remove fields from each package.json before publishing them to the registry, removing fields from a complex object is also supported via the dot notation (ie 'scripts.build')"
        },
        "noGitReset": {
          "type": "boolean",
          "description": "During `lerna publish`, when true, do not reset changes to working tree after publishing is complete."
        },
        "gitReset": {
          "type": "boolean",
          "description": "During `lerna publish`, when true, reset changes to working tree after publishing is complete."
        },
        "tempTag": {
          "type": "boolean",
          "description": "During `lerna publish`, when true, create a temporary tag while publishing."
        },
        "noVerifyAccess": {
          "type": "boolean",
          "description": "During `lerna publish`, when true, do not verify package read-write access for current npm user."
        },
        "summaryFile": {
          "anyOf": [{ "type": "string" }, { "type": "boolean" }],
          "description": "Generate a json summary report after all packages have been successfully published, you can pass an optional path for where to save the file."
        },
        "throttle": {
          "type": "boolean",
          "description": "Throttle module publication. This is implicit if a throttle size or delay is provided"
        },
        "throttle-size": {
          "type": "number",
          "description": "Bucket size used to throttle module publication."
        },
        "throttle-delay": {
          "type": "number",
          "description": "Delay between throttle bucket items publications (in seconds)."
        },
        "verifyAccess": {
          "type": "boolean",
          "description": "During `lerna publish`, when true, verify package read-write access for current npm user."
        }
      },
      "run": {
        "dryRun": {
          "type": "boolean",
          "description": "During `lerna run`, when true, displays the process command that would be performed without executing it."
        }
      },
      "version": {
        "allowBranch": {
          "anyOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          ],
          "description": "For `lerna version`, the branches to allow versioning from."
        },
        "allowPeerDependenciesUpdate": {
          "type": "boolean",
          "description": "For `lerna version`, allow updating peer dependencies versions. Note that `peerDependencies` with semver range (ie `>=2.0.0`) will never be bumped even with this flag enabled."
        },
        "amend": {
          "type": "boolean",
          "description": "During `lerna version`, when true, amend the existing commit instead of generating a new one."
        },
        "buildMetadata": {
          "describe": "Apply semver-compatible build metadata to the release",
          "requiresArg": true,
          "type": "string"
        },
        "conventionalBumpPrerelease": {
          "type": "boolean",
          "description": "During `lerna version`, bumps version of changed prereleased packages when using --conventional-commits."
        },
        "conventionalPrerelease": {
          "anyOf": [{ "type": "string" }, { "type": "boolean" }, { "type": "array", "items": { "type": "string" } }],
          "description": "During `lerna version`, version changed packages as prereleases when using --conventional-commits."
        },
        "changelogHeaderMessage": {
          "type": "string",
          "description": "During `lerna version`, add a custom message at the top of all \"changelog.md\" files. This option is only available when using --conventional-commits with changelogs."
        },
        "changelogIncludeCommitsGitAuthor": {
          "anyOf": [{ "type": "string" }, { "type": "boolean" }],
          "description": "During `lerna version`, specify if we want to include the commit author's name, this option is only available when using --conventional-commits with changelogs. We can also optionally provide a custom message or else a default format will be used."
        },
        "changelogIncludeCommitsClientLogin": {
          "anyOf": [{ "type": "string" }, { "type": "boolean" }],
          "description": "During `lerna version`, specify if we want to include the commit remote client login name (ie GitHub username), this option is only available when using --conventional-commits with changelogs. We can also optionally provide a custom message or else a default format will be used."
        },
        "changelogPreset": {
          "anyOf": [
            { "type": "string" },
            {
              "$ref": "https://raw.githubusercontent.com/conventional-changelog/conventional-changelog-config-spec/master/versions/2.2.0/schema.json"
            }
          ],
          "description": "For `lerna version`, the custom conventional-changelog preset."
        },
        "dryRun": {
          "type": "boolean",
          "description": "During `lerna version`, displays the process command that would be performed without executing it."
        },
        "gitRemote": {
          "type": "string",
          "description": "During `lerna version`, push git changes to the specified remote."
        },
        "createRelease": {
          "type": "string",
          "description": "During `lerna version`, an official GitHub or GitLab release for every version.",
          "enum": ["github", "gitlab"]
        },
        "createReleaseDiscussion": {
          "type": "string",
          "description": "Create a GitHub Discussion from the new release (note that createRelease must be enabled for this to work)."
        },
        "generateReleaseNotes": {
          "type": "boolean",
          "description": "Provides an alternative to create a GitHub release by letting GitHub automatically generate the name and body for the new release."
        },
        "message": {
          "type": "string",
          "description": "For `lerna version`, the custom commit message to use when creating the version commit."
        },
        "noChangelog": {
          "type": "boolean",
          "description": "During `lerna version`, when true, do not generate CHANGELOG.md files when using --conventional-commits."
        },
        "changelog": {
          "type": "boolean",
          "description": "During `lerna version`, when true, generate CHANGELOG.md files when using --conventional-commits."
        },
        "noCommitHooks": {
          "type": "boolean",
          "description": "During `lerna version`, when true, do not run git commit hooks when committing version changes."
        },
        "commitHooks": {
          "type": "boolean",
          "description": "During `lerna version`, when true, run git commit hooks when committing version changes."
        },
        "gitTagCommand": {
          "type": "string",
          "description": "During `lerna version`, allows users to specify a custom command to be used when applying git tags."
        },
        "noGitTagVersion": {
          "type": "boolean",
          "description": "During `lerna version`, when true, do not commit or tag version changes."
        },
        "gitTagVersion": {
          "type": "boolean",
          "description": "During `lerna version`, when true, commit and tag version changes."
        },
        "tagVersionSeparator": {
          "type": "string",
          "description": "Customize the tag version separator used when creating tags for independent versioning, defaults to \"@\"."
        },
        "noPush": {
          "type": "boolean",
          "description": "During `lerna version`, when true, do not push tagged commit to git remote."
        },
        "push": {
          "type": "boolean",
          "description": "During `lerna version`, when true, push tagged commit to git remote."
        },
        "pushTagsOneByOne": {
          "type": "boolean",
          "description": "For `lerna version`, pushes git tags one by one (only useful for `independent` mode)."
        },
        "signGitCommit": {
          "type": "boolean",
          "description": "During `lerna version`, when true, pass the `--gpg-sign` flag to `git commit`."
        },
        "signoffGitCommit": {
          "type": "boolean",
          "description": "During `lerna version`, when true, pass the `--signoff` flag to `git commit`."
        },
        "signGitTag": {
          "type": "boolean",
          "description": "During `lerna version`, when true, pass the `--sign` flag to `git tag`."
        },
        "forceGitTag": {
          "type": "boolean",
          "description": "During `lerna version`, when true, pass the `--force` flag to `git tag`."
        },
        "runScriptsOnLockfileUpdate": {
          "type": "boolean",
          "description": "During `lerna version`, when true, runs lifecycle scripts when syncing the lock file after the version bump."
        },
        "skipBumpOnlyReleases": {
          "type": "boolean",
          "description": "Skip remote release(s) creation when the version is a \"version bump only\""
        },
        "syncWorkspaceLock": {
          "type": "boolean",
          "description": "During `lerna version`, runs `npm install --package-lock-only` or equivalent depending on the package manager defined in `npmClient`"
        },
        "tagVersionPrefix": {
          "type": "string",
          "description": "During `lerna version`, customize the tag prefix. To remove entirely, pass an empty string."
        },
        "premajorVersionBump": {
          "type": "string",
          "description": "During `lerna version`, with 'force-patch', ensure premajor version releases are bumped as patch for non-breaking changes.",
          "enum": ["default", "force-patch"]
        }
      },
      "watch": {
        "debounce": {
          "type": "number",
          "description": "Defaults to 200, time to wait in milliseconds before emitting all the file changes into a single event."
        },
        "fileDelimiter": {
          "type": "string",
          "description": "Defaults to whitespace, the delimiter that will be used to separate file when mutiple file changes are emitted by the watch."
        },
        "glob": {
          "type": "string",
          "description": "Glob pattern to define which file pattern to watch, note that this will be appended to the package file path being watched."
        },
        "awaitWriteFinish": {
          "type": "boolean",
          "description": "Defaults to false, by default the add event will fire when a file first appears on disk, before the entire file has been written. Setting awaitWriteFinish to true (or a truthy value) will poll file size, holding its add and change events until the size does not change for a configurable amount of time."
        },
        "awfPollInterval": {
          "type": "number",
          "description": "Default to 100, file size polling interval, in milliseconds."
        },
        "awfStabilityThreshold": {
          "type": "number",
          "description": "Default to 2000, amount of time in milliseconds for a file size to remain constant before emitting its event."
        },
        "atomic": {
          "type": "boolean",
          "description": "Default to true, if `useFsEvents` and `usePolling` are `false`. Automatically filters out artifacts that occur when using editors that use \"atomic writes\" instead of writing directly to the source file"
        },
        "depth": {
          "type": "number",
          "description": "Default to `undefined`, if set, limits how many levels of subdirectories will be traversed."
        },
        "disableGlobbing": {
          "type": "boolean",
          "description": "Defaults to false, if set to true then the strings passed to .watch() and .add() are treated as literal path names, even if they look like globs."
        },
        "followSymlinks": {
          "type": "boolean",
          "description": "Defaults to true, when false, only the symlinks themselves will be watched for changes instead of following the link references and bubbling events through the link's path."
        },
        "ignored": {
          "anyOf": [{ "type": "string" }, { "type": "array", "items": { "type": "string" } }],
          "description": "Defines files/paths to be ignored."
        },
        "ignoreInitial": {
          "type": "boolean",
          "description": "Defaults to true, if set to false then add/addDir events are also emitted for matching paths while instantiating the watching as chokidar discovers these file paths (before the ready event)."
        },
        "ignorePermissionErrors": {
          "type": "boolean",
          "description": "Defaults to true, indicates whether to watch files that don't have read permissions if possible"
        },
        "interval": {
          "type": "number",
          "description": "Defaults to 100, interval of file system polling, in milliseconds. You may also set the CHOKIDAR_INTERVAL env variable to override this option."
        },
        "usePolling": {
          "type": "boolean",
          "description": "Defaults to false, whether to use fs.watchFile (backed by polling), or fs.watch. If polling leads to high CPU utilization, consider setting this to false."
        }
      },
      "shared": {
        "registry": {
          "type": "string",
          "description": "The npm registry to use for all npm client operations. During `lerna create`, specifies the new package's publishConfig.registry."
        },
        "conventionalCommits": {
          "type": "boolean",
          "description": "During `lerna version`, `lerna changed`, and `lerna publish`, when true, use conventional commits specification to determine the version bump and generate CHANGELOG.md files."
        },
        "conventionalGraduate": {
          "anyOf": [{ "type": "string" }, { "type": "boolean" }, { "type": "array", "items": { "type": "string" } }],
          "description": "Detect currently prereleased packages that would change to a non-prerelease version. Relevant for `lerna changed` and `lerna version`."
        },
        "forceConventionalGraduate": {
          "type": "boolean",
          "description": "Forces all packages specified by --conventional-graduate to bump their version whether or not they are a prerelease or have changes since the previous version. Relevant for `lerna changed` and `lerna version`."
        },
        "forceLocal": {
          "type": "boolean",
          "description": "During `lerna bootstrap` and `lerna link`, when true, force local sibling links regardless of version range match."
        },
        "contents": {
          "type": "string",
          "description": "For `lerna publish`, the subdirectory to use as the source of any links. Must apply to ALL packages."
        },
        "ignoreChanges": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Ignore changes in files matched by glob(s) when detecting changed packages. Relevant for `lerna changed`, `lerna publish`, `lerna version`, and `lerna diff`."
        },
        "stream": {
          "type": "boolean",
          "description": "During `lerna exec`, `lerna run` and `lerna watch`, stream output with lines prefixed by originating package name."
        },
        "parallel": {
          "type": "boolean",
          "description": "During `lerna exec` and `lerna run`, run commands with unlimited concurrency, streaming prefixed output."
        },
        "noBail": {
          "type": "boolean",
          "description": "During `lerna exec`, `lerna run` and `lerna watch`, when true, do not exit with non-zero status if a command fails."
        },
        "bail": {
          "type": "boolean",
          "description": "During `lerna exec`, `lerna run` and `lerna watch`, exit with non-zero status if any command fails."
        },
        "noPrefix": {
          "type": "boolean",
          "description": "During `lerna exec`, `lerna run` and `lerna watch`, when true, do not prefix output with originating package name."
        },
        "prefix": {
          "type": "boolean",
          "description": "During `lerna exec`, `lerna run` and `lerna watch`, prefix output with originating package name."
        },
        "profile": {
          "type": "boolean",
          "description": "During `lerna exec` and `lerna run`, profile command execution and output performance profile to default location."
        },
        "profileLocation": {
          "type": "string",
          "description": "During `lerna exec` and `lerna run`, profile command execution and output performance profile to the specified location instead of default project root."
        },
        "preid": {
          "type": "string",
          "description": "For `lerna publish` and `lerna version`, the prerelease identifier when versioning a prerelease."
        },
        "ignoreScripts": {
          "type": "boolean",
          "description": "During `lerna publish`, and `lerna version`, don't run ANY lifecycle scripts in bootstrapped packages."
        },
        "noGranularPathspec": {
          "type": "boolean",
          "description": "During `lerna publish` and `lerna version`, when true, do not reset changes file-by-file, but globally."
        },
        "granularPathspec": {
          "type": "boolean",
          "description": "During `lerna publish` and `lerna version`, when true, reset changes file-by-file, not globally."
        },
        "forcePublish": {
          "description": "During `lerna changed` and `lerna version`, always include targeted packages when detecting changed packages, skipping default logic.",
          "anyOf": [{ "type": "string" }, { "type": "boolean" }, { "type": "array", "items": { "type": "string" } }]
        },
        "exact": {
          "type": "boolean",
          "description": "During `lerna add`, save the exact version of the newly added package. During `lerna version`, specify cross-dependency version numbers exactly rather than with a caret (^)."
        },
        "independentSubpackages": {
          "type": "boolean",
          "description": "Exclude sub-packages when versioning"
        },
        "ignorePrepublish": {
          "type": "boolean",
          "description": "During `lerna publish`, when true, disable deprecated 'prepublish' lifecycle script."
        },
        "verbose": {
          "type": "boolean",
          "description": "When true, escalates loglevel to 'verbose'."
        }
      }
    }
  }
}
