name: üè∑Ô∏è Publish NPM Latest

on:
  workflow_dispatch:
    inputs:
      dryrun:
        type: boolean
        description: Dry-Run
      graduate:
        type: boolean
        description: Force Conventional Graduate

permissions:
  contents: write
  id-token: write

jobs:
  deploy-npm-latest:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Retrieve current Date Time in EST
        shell: bash
        run: echo "START_TIME=$(TZ=":America/New_York" date -R|sed 's/.....$//')" >> $GITHUB_ENV

      - name: Current datetime - ${{ env.START_TIME }}
        run: echo ${{ env.START_TIME }}

      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - if: ${{ github.event.pull_request.merged != true && contains('["ghiscoding"]', github.actor) != true }}
        name: Exit early when current actor is not allowed to push new release
        run: |
          echo "Error: Your GitHub username (${{ github.actor }}) is not on the allowed list of admins for this workflow"
          exit 1

      - name: Set NodeJS
        uses: actions/setup-node@v4
        with:
          registry-url: 'https://registry.npmjs.org/'
          node-version: 20
          scope: "@lerna-lite"

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Get pnpm store directory
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Run pnpm install dependencies
        run: pnpm install

      - name: Run all workspace TSC builds
        run: pnpm build:full

      - name: Lerna Version (build query)
        shell: bash
        run: |
          if ${{inputs.dryrun == true && inputs.graduate != true}}
          then
              echo "LERNA_VERSION_TYPE=üß™ Dry-Run" >> $GITHUB_ENV
              echo "LERNA_VERSION_QUERY=pnpm run local-lerna version --yes --dry-run" >> $GITHUB_ENV
          elif ${{inputs.dryrun == true && inputs.graduate == true}}
          then
              echo "LERNA_VERSION_TYPE=üß™ Dry-Run w/Graduate" >> $GITHUB_ENV
              echo "LERNA_VERSION_QUERY=pnpm run local-lerna version --yes --dry-run --conventional-graduate" >> $GITHUB_ENV
          elif ${{inputs.dryrun != true && inputs.graduate == true}}
          then
              echo "LERNA_VERSION_TYPE=üöÄ Prod Version w/Graduate" >> $GITHUB_ENV
              echo "LERNA_VERSION_QUERY=pnpm run local-lerna version --yes --conventional-graduate" >> $GITHUB_ENV
          elif ${{inputs.dryrun != true && inputs.graduate != true}}
          then
              echo "LERNA_VERSION_TYPE=üöÄ Prod Version" >> $GITHUB_ENV
              echo "LERNA_VERSION_QUERY=pnpm run local-lerna version --yes" >> $GITHUB_ENV
          fi

      - name: Final version query type - ${{ env.LERNA_VERSION_TYPE }}
        run: echo "${{ env.LERNA_VERSION_QUERY }}"

      - name: Lerna Version üè∑Ô∏è
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          pnpm whoami
          pnpm exec ${{ env.LERNA_VERSION_QUERY }}

      - name: OTP
        if: ${{ inputs.dryrun != true }}
        uses: step-security/wait-for-secrets@v1
        id: wait-for-secrets
        with:
          secrets: |
            OTP:
              name: 'OTP to publish package'
              description: 'OTP from authenticator app'

      - name: Lerna Publish üì¶
        if: ${{ inputs.dryrun != true }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true
        shell: bash
        run: |
          # Attempt to publish all packages
          try {
            pnpm run local-lerna publish from-package --force-publish --yes --otp ${{ steps.wait-for-secrets.outputs.OTP }}
          } catch (error) {
            # Check for EOTP error
            if [[ "$error" == *"EOTP"* ]]; then
              echo "::error title=OTP Expired::OTP has expired. Please provide a new OTP."
              # Prompt for a new OTP
              OTP=$(step-security/wait-for-secrets@v1 \
                secrets: |
                  OTP:
                    name: 'New OTP to publish package'
                    description: 'OTP from authenticator app' \
                )
              # Retry the publish command with the new OTP
              pnpm run local-lerna publish from-package --force-publish --yes --otp $OTP
            # Check for version conflict error (replace with your actual check)
            elif [[ "$error" == *"version conflict"* ]]; then
              echo "::warning title=Version Conflict::A package has a version conflict. Skipping."
            else
              # Fail the workflow for other errors
              echo "::error title=Publish Failed::Publishing failed with an unexpected error."
              exit 1
            }
          }